<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Working with the JavaScript prototype object</title>
</head>
<body>
    <script type="text/javascript">
        /*
        Prototypal inheritance is a form of object-oriented code reuse. Javascript is one of the only [mainstream] object-oriented languages to use prototypal inheritance. Almost all other object-oriented languages are classical.

        In classical inheritance, the programmer writes a class, which defines an object. Multiple objects can be instantiated from the same class, so you have code in one place which describes several objects in your program. Classes can then be organized into a hierarchy, furthering code reuse. More general code is stored in a higher-level class, from which lower level classes inherit. This means that an object is sharing code with other objects of the same class, as well as with it's parent classes.

        In the prototypal inheritance form, objects inherit directly from other objects. All of the business about classes goes away. If you want an object, you just write an object. But code reuse is still a valuable thing, so objects are allowed to be linked together in a hierarchy. In javascript, every object has a secret link to the object which created it, forming a chain. When an object is asked for a property that it does not have, its parent object is asked... continually up the chain until the property is found or until the root object is reached.

        Each object in javascript actually has a member called "prototype", which is responsible for providing values when an object is asked for them. Adding a property to the prototype of an object will make it available to that object, as well as to all of the objects which inherit from it.

        Advantages

        There may not be a hard and fast rule as to why prototypal inheritance is an advantageous form of code-reuse. Code reuse itself is advantageous, and prototypal inheritance is a sensible way of going about it. You might argue that prototypal inheritance is a fairly simple model of code reuse, and that code can be heavily reused in direct ways. But classical languages are certainly able to accomplish this as well.
        */
        //JS Class with default constructors 
        function Square() {
            this.x = 1;
            this.y = 2;
        }

        obj = new Square;

        for (var prop in obj) {
            document.write(prop + " = " + obj[prop] + "<br />");
        }
        document.write("<hr />");

        /////////////////////////////////

        //Defining and Calling Methods in a Class
        function Polygon() {
            this.x = 5;
        }
        //In JavaScript, each Object can inherit properties from another object, called it's prototype.
        Polygon.prototype.AddX = function (base_value)    // Define Method
        {
            this.x += base_value;
        }

        obj = new Polygon;
        obj.AddX(5);                        // Call Method   
        document.write("Polygon Base Value = " + obj.x);
        document.write("<hr />");

        /////////////////////////////////      

        //Polymorphism is achieved by simply having different object classes implement a collection of methods that use the same names. 
        function Rectangle() {
            this.x = 2;
            this.y = 2;
        }

        Rectangle.prototype.Area = function ()    // Define Method
        {
            return (this.x * 2) * (this.y * 2);
        }

        function Square() {
            this.x = 2;
            this.y = 2;
        }

        Square.prototype.Area = function ()    // Define Method
        {
            return this.x * this.y;
        }

        a = new Rectangle;
        b = new Square;

        document.write("Rectangle Area = " + a.Area() + "<br />Square Area = " + b.Area());
        document.write("<hr />");

        /////////////////////////////////            

        //Inheritance and SubClassing
        //The standard paradigm, is to use the prototype chain to implement the inheritance of methods from a super class. Any methods defined on the sub-class will supersede those defined on the super-class.

        function Shape()                        // Define super class
        {
            this.x = 1;
            this.y = 1;
        }

        Shape.prototype.Area = function ()        // Define Method
        {
            this.x * this.y;
        }

        Rectangle.prototype = new Shape;                // Define sub-class
        Rectangle.prototype.constructor = Rectangle;

        function Rectangle() {
            Shape.call(this);                    // Call super-class constructor (if desired)
            this.x = 2;
            this.y = 2;
        }

        Rectangle.prototype.Area = function ()        // Define Method
        {
            Shape.prototype.Area.call(this);    // Call super-class method (if desired)
        }

        rect = new Rectangle;

        document.write("Is rect an instance of Shape? " + (rect instanceof Shape) + "<br />Is rect an instance of Rectangle? " + (rect instanceof Rectangle) + '<br />');
        rect.Area();
        document.write("x = " + rect.x + '<br />y = ' + rect.y);

        //Private variables are used for Encapsulation 
    </script> 
</body>
</html>
